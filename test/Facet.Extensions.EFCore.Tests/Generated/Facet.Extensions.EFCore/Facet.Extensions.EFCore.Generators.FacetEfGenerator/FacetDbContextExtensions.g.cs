// <auto-generated />
#nullable enable

using System;
using System.Linq;
using System.Reflection;
using Microsoft.EntityFrameworkCore;
using Facet.Extensions;

namespace Facet.Extensions.EFCore.Tests.TestData;

/// <summary>
/// Extension methods for DbContext to enable fluent Facet navigation building.
/// </summary>
public static class FacetDbContextExtensions
{
    /// <summary>
    /// Create a fluent builder for entity queries with navigation inclusion.
    /// </summary>
    /// <typeparam name="TEntity">The entity type to query</typeparam>
    /// <typeparam name="TDto">The DTO type that TEntity will be projected to</typeparam>
    /// <param name="context">The DbContext</param>
    /// <returns>A fluent builder for the specified entity type</returns>
    public static object Facet<TEntity, TDto>(this DbContext context)
        where TEntity : class
        where TDto : class
    {
        // Validate that TDto has a Projection property (required by SelectFacet)
        var projectionProperty = typeof(TDto).GetProperty(
            "Projection",
            BindingFlags.Public | BindingFlags.Static);
            
        if (projectionProperty == null)
        {
            throw new InvalidOperationException(
                $"DTO type '{typeof(TDto).Name}' does not have a static 'Projection' property. " +
                "Ensure the DTO is generated by Facet or manually implements the Projection property.");
        }
        
        var entityName = typeof(TEntity).Name;
        // Use reflection to create the appropriate builder type
        // This is a placeholder - actual implementation would use generated builders
        throw new NotImplementedException($"Fluent builder for {entityName} not yet implemented");
    }

    /// <summary>
    /// Create a fluent builder for Category queries.
    /// </summary>
    public static FacetCategoryBuilder<ICategoryShape> FacetCategory(this DbContext context)
    {
        var query = context.Set<Facet.Extensions.EFCore.Tests.TestData.Category>().AsNoTracking();
        return new FacetCategoryBuilder<ICategoryShape>(query);
    }

    /// <summary>
    /// Create a fluent builder for Order queries.
    /// </summary>
    public static FacetOrderBuilder<IOrderShape> FacetOrder(this DbContext context)
    {
        var query = context.Set<Facet.Extensions.EFCore.Tests.TestData.Order>().AsNoTracking();
        return new FacetOrderBuilder<IOrderShape>(query);
    }

    /// <summary>
    /// Create a fluent builder for OrderItem queries.
    /// </summary>
    public static FacetOrderItemBuilder<IOrderItemShape> FacetOrderItem(this DbContext context)
    {
        var query = context.Set<Facet.Extensions.EFCore.Tests.TestData.OrderItem>().AsNoTracking();
        return new FacetOrderItemBuilder<IOrderItemShape>(query);
    }

    /// <summary>
    /// Create a fluent builder for Product queries.
    /// </summary>
    public static FacetProductBuilder<IProductShape> FacetProduct(this DbContext context)
    {
        var query = context.Set<Facet.Extensions.EFCore.Tests.TestData.Product>().AsNoTracking();
        return new FacetProductBuilder<IProductShape>(query);
    }

    /// <summary>
    /// Create a fluent builder for User queries.
    /// </summary>
    public static FacetUserBuilder<IUserShape> FacetUser(this DbContext context)
    {
        var query = context.Set<Facet.Extensions.EFCore.Tests.TestData.User>().AsNoTracking();
        return new FacetUserBuilder<IUserShape>(query);
    }

}
