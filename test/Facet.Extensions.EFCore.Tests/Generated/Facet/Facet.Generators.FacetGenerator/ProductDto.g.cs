// <auto-generated>
//     This code was generated by the Facet source generator.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using Facet.Extensions.EFCore.Tests.TestData;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;

namespace Facet.Extensions.EFCore.Tests.Extensions;
public partial record ProductDto
{
    public int Id { get; set; }
    public string Name { get; set; }
    public string Description { get; set; }
    public decimal Price { get; set; }
    public int CategoryId { get; set; }
    public bool IsAvailable { get; set; }
    public global::System.DateTime CreatedAt { get; set; }
    public global::Facet.Extensions.EFCore.Tests.TestData.Category Category { get; set; }
    public global::System.Collections.Generic.ICollection<global::Facet.Extensions.EFCore.Tests.TestData.OrderItem> OrderItems { get; set; }
    /// <summary>
    /// Creates a new ProductDto from the source with faceted properties initialized.
    /// This record has an existing primary constructor, so you must provide values
    /// for the primary constructor parameters when creating instances.
    /// Example: new ProductDto(primaryConstructorParam) { PropA = source.PropA, PropB = source.PropB }
    /// </summary>
    public static ProductDto FromSource(global::Facet.Extensions.EFCore.Tests.TestData.Product source, params object[] primaryConstructorArgs)
    {
        // For records with existing primary constructors, you must manually create the instance
        // and initialize the faceted properties using object initializer syntax.
        throw new NotSupportedException(
            "Records with existing primary constructors must be created manually. " +
            "Example: new ProductDto(primaryConstructorParam) { Id = source.Id, Name = source.Name }");
    }

    // Note: Parameterless constructor not generated for records with existing primary constructors
    // to avoid conflicts with C# language rules. Use object initializer syntax instead:
    // var instance = new ProductDto(primaryConstructorParams) { /* initialize faceted properties */ };

    // Note: Projection generation is not supported for records with existing primary constructors.
    // You must manually create projection expressions or use the FromSource factory method.
    // Example: source => new ProductDto(defaultPrimaryConstructorValue) { PropA = source.PropA, PropB = source.PropB }
}
