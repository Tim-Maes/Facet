using System;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Xunit;
using Xunit.Abstractions;
using Facet.Generators;
using VerifyXunit;
using VerifyTests;
using static VerifyXunit.Verifier;

namespace Facet.UnitTests.SourceGeneration;

/// <summary>
/// Tests for modern C# record features with Facet generation.
/// Verifies handling of init-only properties, required properties, and record structs.
/// </summary>
public class ModernRecordGenerationTests
{
    private readonly ITestOutputHelper _output;

    public ModernRecordGenerationTests(ITestOutputHelper output)
    {
        _output = output;
    }

    [Fact]
    public Task ModernRecordGeneration_WithRequiredProperties_GeneratesCorrectDto()
    {
        // Arrange
        var source = @"
            using System;
            using Facet;
            
            public record ModernUser
            {
                public required string Id { get; init; }
                public required string FirstName { get; init; }
                public required string LastName { get; init; }
                public string? Email { get; set; }
                public DateTime CreatedAt { get; init; } = DateTime.UtcNow;
                public string? Bio { get; set; }
                public string? PasswordHash { get; init; }
            }

            [Facet(typeof(ModernUser), ""PasswordHash"", ""Bio"")]
            public partial record ModernUserDto
            {
                public string FullName { get; set; } = string.Empty;
                public string DisplayName { get; set; } = string.Empty;
            }
        ";

        var compilation = CreateCompilation(source);
        var generator = new FacetGenerator();

        // Act
        var driver = CSharpGeneratorDriver.Create(generator)
            .RunGenerators(compilation);

        // Assert
        var runResult = driver.GetRunResult();
        var generatedSources = SourceGeneratorTestHelpers.ExtractGeneratedSources(runResult);
        
        return Verify(generatedSources)
            .UseDirectory("__snapshots__")
            .UseFileName("RequiredProperties")
            .ScrubLines(line => line.StartsWith("// <auto-generated"));
    }

    [Fact]
    public Task ModernRecordGeneration_WithInitOnlyProperties_HandlesImmutability()
    {
        // Arrange
        var source = @"
            using System;
            using Facet;
            
            public record ImmutableEntity
            {
                public int Id { get; init; }
                public string Name { get; init; } = string.Empty;
                public DateTime CreatedAt { get; init; } = DateTime.UtcNow;
                public decimal Value { get; init; }
                public bool IsActive { get; init; } = true;
            }

            [Facet(typeof(ImmutableEntity), Kind = FacetKind.Record)]
            public partial record ImmutableEntityDto;
        ";

        var compilation = CreateCompilation(source);
        var generator = new FacetGenerator();

        // Act
        var driver = CSharpGeneratorDriver.Create(generator)
            .RunGenerators(compilation);

        // Assert
        var runResult = driver.GetRunResult();
        var generatedSources = SourceGeneratorTestHelpers.ExtractGeneratedSources(runResult);
        
        return Verify(generatedSources)
            .UseDirectory("__snapshots__")
            .UseFileName("InitOnlyProperties")
            .ScrubLines(line => line.StartsWith("// <auto-generated"));
    }

    [Fact]
    public Task ModernRecordGeneration_WithRecordStruct_GeneratesValueType()
    {
        // Arrange
        var source = @"
            using System;
            using Facet;
            
            public record struct CompactUser(string Id, string Name, DateTime CreatedAt);

            [Facet(typeof(CompactUser))]
            public partial record struct CompactUserDto;
        ";

        var compilation = CreateCompilation(source);
        var generator = new FacetGenerator();

        // Act
        var driver = CSharpGeneratorDriver.Create(generator)
            .RunGenerators(compilation);

        // Assert
        var runResult = driver.GetRunResult();
        var generatedSources = SourceGeneratorTestHelpers.ExtractGeneratedSources(runResult);
        
        return Verify(generatedSources)
            .UseDirectory("__snapshots__")
            .UseFileName("RecordStructType")
            .ScrubLines(line => line.StartsWith("// <auto-generated"));
    }

    [Fact]
    public Task ModernRecordGeneration_WithNullableProperties_HandlesNullability()
    {
        // Arrange
        var source = @"
            using System;
            using Facet;
            
            public record UserProfile
            {
                public required string Id { get; init; }
                public required string Username { get; init; }
                public string? Email { get; set; }
                public string? FirstName { get; set; }
                public string? LastName { get; set; }
                public DateTime? DateOfBirth { get; set; }
                public string? ProfilePictureUrl { get; set; }
                public string? Bio { get; set; }
            }

            [Facet(typeof(UserProfile))]
            public partial record UserProfileDto;
        ";

        var compilation = CreateCompilation(source);
        var generator = new FacetGenerator();

        // Act
        var driver = CSharpGeneratorDriver.Create(generator)
            .RunGenerators(compilation);

        // Assert
        var runResult = driver.GetRunResult();
        var generatedSources = SourceGeneratorTestHelpers.ExtractGeneratedSources(runResult);
        
        return Verify(generatedSources)
            .UseDirectory("__snapshots__")
            .UseFileName("NullableProperties")
            .ScrubLines(line => line.StartsWith("// <auto-generated"));
    }

    [Fact]
    public Task ModernRecordGeneration_WithMixedMutability_GeneratesCorrectAccessors()
    {
        // Arrange
        var source = @"
            using System;
            using Facet;
            
            public record MixedMutabilityRecord
            {
                public required string Id { get; init; }
                public required string Name { get; init; }
                public string Description { get; set; } = string.Empty;
                public decimal Value { get; set; }
                public DateTime CreatedAt { get; init; } = DateTime.UtcNow;
                public DateTime? UpdatedAt { get; set; }
                public bool IsReadOnly { get; init; } = false;
                public string Status { get; set; } = ""Active"";
            }

            [Facet(typeof(MixedMutabilityRecord), Kind = FacetKind.Record)]
            public partial record MixedMutabilityDto;
        ";

        var compilation = CreateCompilation(source);
        var generator = new FacetGenerator();

        // Act
        var driver = CSharpGeneratorDriver.Create(generator)
            .RunGenerators(compilation);

        // Assert
        var runResult = driver.GetRunResult();
        var generatedSources = SourceGeneratorTestHelpers.ExtractGeneratedSources(runResult);
        
        return Verify(generatedSources)
            .UseDirectory("__snapshots__")
            .UseFileName("MixedMutability")
            .ScrubLines(line => line.StartsWith("// <auto-generated"));
    }

    [Theory]
    [InlineData("Record", "FacetKind.Record")]
    [InlineData("Class", "FacetKind.Class")]
    [InlineData("RecordStruct", "FacetKind.RecordStruct")]
    public Task ModernRecordGeneration_WithDifferentTargetKinds_GeneratesAppropriateType(
        string testName, string facetKind)
    {
        // Arrange
        var source = $@"
            using System;
            using Facet;
            
            public record ModernEntity
            {{
                public required string Id {{ get; init; }}
                public required string Name {{ get; init; }}
                public string? Description {{ get; set; }}
                public DateTime CreatedAt {{ get; init; }} = DateTime.UtcNow;
                public bool IsActive {{ get; set; }} = true;
            }}

            [Facet(typeof(ModernEntity), Kind = {facetKind})]
            public partial {GetTypeDeclaration(testName)} ModernEntityDto;
        ";

        var compilation = CreateCompilation(source);
        var generator = new FacetGenerator();

        // Act
        var driver = CSharpGeneratorDriver.Create(generator)
            .RunGenerators(compilation);

        // Assert
        var runResult = driver.GetRunResult();
        var generatedSources = SourceGeneratorTestHelpers.ExtractGeneratedSources(runResult);
        
        return Verify(generatedSources)
            .UseDirectory("__snapshots__")
            .UseMethodName($"TargetKind_{testName}")
            .ScrubLines(line => line.StartsWith("// <auto-generated"));
    }

    [Fact]
    public Task ModernRecordGeneration_WithPrimaryConstructor_HandlesPositionalProperties()
    {
        // Arrange
        var source = @"
            using System;
            using Facet;
            
            public record PersonRecord(
                string FirstName,
                string LastName,
                DateTime DateOfBirth,
                string Email)
            {
                public int Id { get; set; }
                public bool IsActive { get; set; } = true;
                public DateTime CreatedAt { get; init; } = DateTime.UtcNow;
            }

            [Facet(typeof(PersonRecord))]
            public partial record PersonRecordDto;
        ";

        var compilation = CreateCompilation(source);
        var generator = new FacetGenerator();

        // Act
        var driver = CSharpGeneratorDriver.Create(generator)
            .RunGenerators(compilation);

        // Assert
        var runResult = driver.GetRunResult();
        var generatedSources = SourceGeneratorTestHelpers.ExtractGeneratedSources(runResult);
        
        return Verify(generatedSources)
            .UseDirectory("__snapshots__")
            .UseFileName("PrimaryConstructor")
            .ScrubLines(line => line.StartsWith("// <auto-generated"));
    }

    private static string GetTypeDeclaration(string testName)
    {
        return testName switch
        {
            "Record" => "record",
            "Class" => "class",
            "RecordStruct" => "record struct",
            _ => "record"
        };
    }

    private static Compilation CreateCompilation(string source)
    {
        return CSharpCompilation.Create(
            "TestAssembly",
            syntaxTrees: new[] { CSharpSyntaxTree.ParseText(source) },
            references: GetMetadataReferences(),
            options: new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary));
    }

    private static MetadataReference[] GetMetadataReferences()
    {
        // Get all necessary references for compilation
        var assemblies = AppDomain.CurrentDomain.GetAssemblies()
            .Where(a => !a.IsDynamic && !string.IsNullOrWhiteSpace(a.Location))
            .ToList();

        // Explicitly ensure Facet assembly is included
        var facetAssembly = typeof(FacetAttribute).Assembly;
        if (!assemblies.Contains(facetAssembly))
        {
            assemblies.Add(facetAssembly);
        }

        return assemblies
            .Select(a => MetadataReference.CreateFromFile(a.Location))
            .ToArray();
    }

}