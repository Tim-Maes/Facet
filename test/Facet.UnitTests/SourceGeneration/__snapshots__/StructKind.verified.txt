[
  {
    HintName: ProductSummary.g.cs,
    Source:
//     This code was generated by the Facet source generator.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using System;
using System.Linq.Expressions;

public partial struct ProductSummary
{
    public int Id { get; set; }
    public string Name { get; set; }
    public decimal Price { get; set; }
    public bool IsAvailable { get; set; }

    /// <summary>
    /// Initializes a new instance of the <see cref="ProductSummary"/> class from the specified <see cref="global::Product"/>.
    /// </summary>
    /// <param name="source">The source <see cref="global::Product"/> object to copy data from.</param>
    public ProductSummary(global::Product source)
    {
        this.Id = source.Id;
        this.Name = source.Name;
        this.Price = source.Price;
        this.IsAvailable = source.IsAvailable;
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="ProductSummary"/> class with default values.
    /// </summary>
    /// <remarks>
    /// This constructor is useful for unit testing, object initialization, and scenarios
    /// where you need to create an empty instance and populate properties later.
    /// </remarks>
    public ProductSummary()
    {
    }

    /// <summary>
    /// Gets the projection expression for converting <see cref="global::Product"/> to <see cref="ProductSummary"/>.
    /// Use this for LINQ and Entity Framework query projections.
    /// </summary>
    /// <value>An expression tree that can be used in LINQ queries for efficient database projections.</value>
    /// <example>
    /// <code>
    /// var dtos = context.global::Products
    ///     .Where(x => x.IsActive)
    ///     .Select(ProductSummary.Projection)
    ///     .ToList();
    /// </code>
    /// </example>
    public static Expression<Func<global::Product, ProductSummary>> Projection =>
        source => new ProductSummary(source);
}

  }
]