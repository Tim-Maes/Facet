[
  {
    HintName: EmployeeDto.g.cs,
    Source:
//     This code was generated by the Facet source generator.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using System;
using System.Linq.Expressions;

public partial class EmployeeDto
{
    public string EmployeeId { get; set; }
    public string Department { get; set; }
    public global::System.DateTime HireDate { get; set; }
    public string FirstName { get; set; }
    public string LastName { get; set; }
    public string DisplayName { get; set; }
    public int Id { get; set; }
    public global::System.DateTime CreatedAt { get; set; }
    public global::System.DateTime UpdatedAt { get; set; }

    /// <summary>
    /// Initializes a new instance of the <see cref="EmployeeDto"/> class from the specified <see cref="global::Employee"/>.
    /// </summary>
    /// <param name="source">The source <see cref="global::Employee"/> object to copy data from.</param>
    public EmployeeDto(global::Employee source)
    {
        this.EmployeeId = source.EmployeeId;
        this.Department = source.Department;
        this.HireDate = source.HireDate;
        this.FirstName = source.FirstName;
        this.LastName = source.LastName;
        this.DisplayName = source.DisplayName;
        this.Id = source.Id;
        this.CreatedAt = source.CreatedAt;
        this.UpdatedAt = source.UpdatedAt;
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="EmployeeDto"/> class with default values.
    /// </summary>
    /// <remarks>
    /// This constructor is useful for unit testing, object initialization, and scenarios
    /// where you need to create an empty instance and populate properties later.
    /// </remarks>
    public EmployeeDto()
    {
    }

    /// <summary>
    /// Gets the projection expression for converting <see cref="global::Employee"/> to <see cref="EmployeeDto"/>.
    /// Use this for LINQ and Entity Framework query projections.
    /// </summary>
    /// <value>An expression tree that can be used in LINQ queries for efficient database projections.</value>
    /// <example>
    /// <code>
    /// var dtos = context.global::Employees
    ///     .Where(x => x.IsActive)
    ///     .Select(EmployeeDto.Projection)
    ///     .ToList();
    /// </code>
    /// </example>
    public static Expression<Func<global::Employee, EmployeeDto>> Projection =>
        source => new EmployeeDto
        {
            EmployeeId = source.EmployeeId,
            Department = source.Department,
            HireDate = source.HireDate,
            FirstName = source.FirstName,
            LastName = source.LastName,
            DisplayName = source.DisplayName,
            Id = source.Id,
            CreatedAt = source.CreatedAt,
            UpdatedAt = source.UpdatedAt
        };
}

  }
]