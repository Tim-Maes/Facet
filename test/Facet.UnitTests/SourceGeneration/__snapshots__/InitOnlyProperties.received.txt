[
  {
    HintName: ImmutableEntityDto.g.cs,
    Source:
//     This code was generated by the Facet source generator.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using System;
using System.Linq.Expressions;

public partial record ImmutableEntityDto(int Id, string Name, global::System.DateTime CreatedAt, decimal Value, bool IsActive);
public partial record ImmutableEntityDto
{

    /// <summary>
    /// Initializes a new instance of the <see cref="ImmutableEntityDto"/> class from the specified <see cref="global::ImmutableEntity"/>.
    /// </summary>
    /// <param name="source">The source <see cref="global::ImmutableEntity"/> object to copy data from.</param>
    public ImmutableEntityDto(global::ImmutableEntity source) : this(source.Id, source.Name, source.CreatedAt, source.Value, source.IsActive)
    {
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="ImmutableEntityDto"/> class with default values.
    /// </summary>
    /// <remarks>
    /// This constructor is useful for unit testing, object initialization, and scenarios
    /// where you need to create an empty instance and populate properties later.
    /// </remarks>
    public ImmutableEntityDto() : this(0, string.Empty, default, 0m, false)
    {
    }

    /// <summary>
    /// Gets the projection expression for converting <see cref="global::ImmutableEntity"/> to <see cref="ImmutableEntityDto"/>.
    /// Use this for LINQ and Entity Framework query projections.
    /// </summary>
    /// <value>An expression tree that can be used in LINQ queries for efficient database projections.</value>
    /// <example>
    /// <code>
    /// var dtos = context.global::ImmutableEntitys
    ///     .Where(x => x.IsActive)
    ///     .Select(ImmutableEntityDto.Projection)
    ///     .ToList();
    /// </code>
    /// </example>
    public static Expression<Func<global::ImmutableEntity, ImmutableEntityDto>> Projection =>
        source => new ImmutableEntityDto
        {
            Id = source.Id,
            Name = source.Name,
            CreatedAt = source.CreatedAt,
            Value = source.Value,
            IsActive = source.IsActive
        };
}

  }
]