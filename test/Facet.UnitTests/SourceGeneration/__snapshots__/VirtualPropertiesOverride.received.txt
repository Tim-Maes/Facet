[
  {
    HintName: DerivedDto.g.cs,
    Source:
//     This code was generated by the Facet source generator.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using System;
using System.Linq.Expressions;

public partial class DerivedDto
{
    public string Category { get; set; }
    public string Name { get; set; }
    public int Id { get; set; }

    /// <summary>
    /// Initializes a new instance of the <see cref="DerivedDto"/> class from the specified <see cref="global::DerivedClass"/>.
    /// </summary>
    /// <param name="source">The source <see cref="global::DerivedClass"/> object to copy data from.</param>
    public DerivedDto(global::DerivedClass source)
    {
        this.Category = source.Category;
        this.Name = source.Name;
        this.Id = source.Id;
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="DerivedDto"/> class with default values.
    /// </summary>
    /// <remarks>
    /// This constructor is useful for unit testing, object initialization, and scenarios
    /// where you need to create an empty instance and populate properties later.
    /// </remarks>
    public DerivedDto()
    {
    }

    /// <summary>
    /// Gets the projection expression for converting <see cref="global::DerivedClass"/> to <see cref="DerivedDto"/>.
    /// Use this for LINQ and Entity Framework query projections.
    /// </summary>
    /// <value>An expression tree that can be used in LINQ queries for efficient database projections.</value>
    /// <example>
    /// <code>
    /// var dtos = context.global::DerivedClasss
    ///     .Where(x => x.IsActive)
    ///     .Select(DerivedDto.Projection)
    ///     .ToList();
    /// </code>
    /// </example>
    public static Expression<Func<global::DerivedClass, DerivedDto>> Projection =>
        source => new DerivedDto
        {
            Category = source.Category,
            Name = source.Name,
            Id = source.Id
        };
}

  }
]