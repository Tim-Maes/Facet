using System;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Xunit;
using Xunit.Abstractions;
using Facet.Generators;
using VerifyXunit;
using VerifyTests;
using static VerifyXunit.Verifier;

namespace Facet.UnitTests.SourceGeneration;

/// <summary>
/// Tests for Facet generator with inheritance chains.
/// Verifies that DTOs correctly handle BaseEntity -> Person -> Employee -> Manager inheritance.
/// </summary>
public class InheritanceGenerationTests
{
    private readonly ITestOutputHelper _output;

    public InheritanceGenerationTests(ITestOutputHelper output)
    {
        _output = output;
    }

    [Fact]
    public Task InheritanceGeneration_WithBaseEntity_GeneratesAllProperties()
    {
        // Arrange
        var source = @"
            using System;
            using Facet;
            
            public abstract class BaseEntity
            {
                public int Id { get; set; }
                public DateTime CreatedAt { get; set; }
                public DateTime UpdatedAt { get; set; }
                public string CreatedBy { get; set; } = string.Empty;
            }

            public class Person : BaseEntity
            {
                public string FirstName { get; set; } = string.Empty;
                public string LastName { get; set; } = string.Empty;
                public virtual string DisplayName => $""{FirstName} {LastName}"";
            }

            [Facet(typeof(Person), ""CreatedBy"")]
            public partial class PersonDto;
        ";

        var compilation = CreateCompilation(source);
        var generator = new FacetGenerator();

        // Act
        var driver = CSharpGeneratorDriver.Create(generator)
            .RunGenerators(compilation);

        // Assert
        var runResult = driver.GetRunResult();
        var generatedSources = SourceGeneratorTestHelpers.ExtractGeneratedSources(runResult);
        
        return Verify(generatedSources)
            .UseDirectory("__snapshots__")
            .UseFileName("BaseEntityInheritance")
            .ScrubLines(line => line.StartsWith("// <auto-generated"));
    }

    [Fact]
    public Task InheritanceGeneration_WithEmployeeChain_HandlesComplexInheritance()
    {
        // Arrange
        var source = @"
            using System;
            using Facet;
            
            public abstract class BaseEntity
            {
                public int Id { get; set; }
                public DateTime CreatedAt { get; set; }
                public DateTime UpdatedAt { get; set; }
                public string CreatedBy { get; set; } = string.Empty;
            }

            public class Person : BaseEntity
            {
                public string FirstName { get; set; } = string.Empty;
                public string LastName { get; set; } = string.Empty;
                public virtual string DisplayName => $""{FirstName} {LastName}"";
            }

            public class Employee : Person
            {
                public string EmployeeId { get; set; } = string.Empty;
                public string Department { get; set; } = string.Empty;
                public decimal Salary { get; set; }
                public DateTime HireDate { get; set; }
                
                public override string DisplayName => $""{FirstName} {LastName} ({EmployeeId})"";
            }

            [Facet(typeof(Employee), ""Salary"", ""CreatedBy"")]
            public partial class EmployeeDto;
        ";

        var compilation = CreateCompilation(source);
        var generator = new FacetGenerator();

        // Act
        var driver = CSharpGeneratorDriver.Create(generator)
            .RunGenerators(compilation);

        // Assert
        var runResult = driver.GetRunResult();
        var generatedSources = SourceGeneratorTestHelpers.ExtractGeneratedSources(runResult);
        
        return Verify(generatedSources)
            .UseDirectory("__snapshots__")
            .UseFileName("EmployeeInheritanceChain")
            .ScrubLines(line => line.StartsWith("// <auto-generated"));
    }

    [Fact]
    public Task InheritanceGeneration_WithManagerChain_HandlesFullInheritanceHierarchy()
    {
        // Arrange
        var source = @"
            using System;
            using Facet;
            
            public abstract class BaseEntity
            {
                public int Id { get; set; }
                public DateTime CreatedAt { get; set; }
                public DateTime UpdatedAt { get; set; }
                public string CreatedBy { get; set; } = string.Empty;
            }

            public class Person : BaseEntity
            {
                public string FirstName { get; set; } = string.Empty;
                public string LastName { get; set; } = string.Empty;
                public virtual string DisplayName => $""{FirstName} {LastName}"";
            }

            public class Employee : Person
            {
                public string EmployeeId { get; set; } = string.Empty;
                public string Department { get; set; } = string.Empty;
                public decimal Salary { get; set; }
                public DateTime HireDate { get; set; }
                
                public override string DisplayName => $""{FirstName} {LastName} ({EmployeeId})"";
            }

            public class Manager : Employee
            {
                public string TeamName { get; set; } = string.Empty;
                public int TeamSize { get; set; }
                public decimal Budget { get; set; }
                
                public override string DisplayName => $""Manager {FirstName} {LastName} - {TeamName}"";
            }

            [Facet(typeof(Manager), ""Salary"", ""Budget"", ""CreatedBy"")]
            public partial class ManagerDto;
        ";

        var compilation = CreateCompilation(source);
        var generator = new FacetGenerator();

        // Act
        var driver = CSharpGeneratorDriver.Create(generator)
            .RunGenerators(compilation);

        // Assert
        var runResult = driver.GetRunResult();
        var generatedSources = SourceGeneratorTestHelpers.ExtractGeneratedSources(runResult);
        
        return Verify(generatedSources)
            .UseDirectory("__snapshots__")
            .UseFileName("ManagerFullHierarchy")
            .ScrubLines(line => line.StartsWith("// <auto-generated"));
    }

    [Fact]
    public Task InheritanceGeneration_WithVirtualProperties_HandlesOverriddenMembers()
    {
        // Arrange
        var source = @"
            using Facet;
            
            public class BaseClass
            {
                public int Id { get; set; }
                public virtual string Name { get; set; } = string.Empty;
                public virtual string GetDisplayText() => Name;
            }

            public class DerivedClass : BaseClass
            {
                public string Category { get; set; } = string.Empty;
                
                public override string Name { get; set; } = string.Empty;
                public override string GetDisplayText() => $""{Name} ({Category})"";
            }

            [Facet(typeof(DerivedClass))]
            public partial class DerivedDto;
        ";

        var compilation = CreateCompilation(source);
        var generator = new FacetGenerator();

        // Act
        var driver = CSharpGeneratorDriver.Create(generator)
            .RunGenerators(compilation);

        // Assert
        var runResult = driver.GetRunResult();
        var generatedSources = SourceGeneratorTestHelpers.ExtractGeneratedSources(runResult);
        
        return Verify(generatedSources)
            .UseDirectory("__snapshots__")
            .UseFileName("VirtualPropertiesOverride")
            .ScrubLines(line => line.StartsWith("// <auto-generated"));
    }

    [Theory]
    [InlineData("Person", new[] { "CreatedBy" })]
    [InlineData("Employee", new[] { "Salary", "CreatedBy" })]
    [InlineData("Manager", new[] { "Salary", "Budget", "CreatedBy" })]
    public Task InheritanceGeneration_WithDifferentExclusions_GeneratesAppropriately(
        string entityType, string[] exclusions)
    {
        // Arrange
        var exclusionList = string.Join("\", \"", exclusions);
        var source = $@"
            using System;
            using Facet;
            
            public abstract class BaseEntity
            {{
                public int Id {{ get; set; }}
                public DateTime CreatedAt {{ get; set; }}
                public DateTime UpdatedAt {{ get; set; }}
                public string CreatedBy {{ get; set; }} = string.Empty;
            }}

            public class Person : BaseEntity
            {{
                public string FirstName {{ get; set; }} = string.Empty;
                public string LastName {{ get; set; }} = string.Empty;
                public virtual string DisplayName => $""{{FirstName}} {{LastName}}"";
            }}

            public class Employee : Person
            {{
                public string EmployeeId {{ get; set; }} = string.Empty;
                public string Department {{ get; set; }} = string.Empty;
                public decimal Salary {{ get; set; }}
                public DateTime HireDate {{ get; set; }}
            }}

            public class Manager : Employee
            {{
                public string TeamName {{ get; set; }} = string.Empty;
                public int TeamSize {{ get; set; }}
                public decimal Budget {{ get; set; }}
            }}

            [Facet(typeof({entityType}), ""{exclusionList}"")]
            public partial class {entityType}Dto;
        ";

        var compilation = CreateCompilation(source);
        var generator = new FacetGenerator();

        // Act
        var driver = CSharpGeneratorDriver.Create(generator)
            .RunGenerators(compilation);

        // Assert
        var runResult = driver.GetRunResult();
        var generatedSources = SourceGeneratorTestHelpers.ExtractGeneratedSources(runResult);
        
        return Verify(generatedSources)
            .UseDirectory("__snapshots__")
            .UseMethodName($"InheritanceExclusions_{entityType}")
            .ScrubLines(line => line.StartsWith("// <auto-generated"));
    }

    private static Compilation CreateCompilation(string source)
    {
        return CSharpCompilation.Create(
            "TestAssembly",
            syntaxTrees: new[] { CSharpSyntaxTree.ParseText(source) },
            references: GetMetadataReferences(),
            options: new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary));
    }

    private static MetadataReference[] GetMetadataReferences()
    {
        // Get all necessary references for compilation
        var assemblies = AppDomain.CurrentDomain.GetAssemblies()
            .Where(a => !a.IsDynamic && !string.IsNullOrWhiteSpace(a.Location))
            .ToList();

        // Explicitly ensure Facet assembly is included
        var facetAssembly = typeof(FacetAttribute).Assembly;
        if (!assemblies.Contains(facetAssembly))
        {
            assemblies.Add(facetAssembly);
        }

        return assemblies
            .Select(a => MetadataReference.CreateFromFile(a.Location))
            .ToArray();
    }

}