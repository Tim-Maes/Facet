using System;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Xunit;
using Xunit.Abstractions;
using Facet.Generators;
using VerifyXunit;
using VerifyTests;
using static VerifyXunit.Verifier;

namespace Facet.UnitTests.SourceGeneration;

/// <summary>
/// Tests for the basic Facet generator using Verify.SourceGenerators for snapshot testing.
/// These tests verify that the source generator produces correct, compilable code.
/// </summary>
public class FacetGeneratorTests
{
    private readonly ITestOutputHelper _output;

    public FacetGeneratorTests(ITestOutputHelper output)
    {
        _output = output;
    }

    [Fact]
    public Task FacetGenerator_WithBasicEntity_GeneratesExpectedDto()
    {
        // Arrange
        var source = @"
            using Facet;
            
            public class User
            {
                public int Id { get; set; }
                public string FirstName { get; set; }
                public string LastName { get; set; }
                public string Email { get; set; }
            }

            [Facet(typeof(User))]
            public partial class UserDto;
        ";

        var compilation = CreateCompilation(source);
        var generator = new FacetGenerator();

        // Act
        var driver = CSharpGeneratorDriver.Create(generator)
            .RunGenerators(compilation);

        // Assert - MANDATORY: Use Verify() for snapshot testing
        return Verify(driver)
            .UseDirectory("Snapshots")
            .UseFileName("BasicEntity")
            .ScrubLines(line => line.StartsWith("// <auto-generated"));
    }

    [Fact]
    public Task FacetGenerator_WithExcludedProperties_GeneratesCorrectDto()
    {
        // Arrange
        var source = @"
            using Facet;
            
            public class User
            {
                public int Id { get; set; }
                public string FirstName { get; set; }
                public string LastName { get; set; }
                public string Email { get; set; }
                public string Password { get; set; }
                public DateTime CreatedAt { get; set; }
            }

            [Facet(typeof(User), ""Password"", ""CreatedAt"")]
            public partial class UserDto;
        ";

        var compilation = CreateCompilation(source);
        var generator = new FacetGenerator();

        // Act
        var driver = CSharpGeneratorDriver.Create(generator)
            .RunGenerators(compilation);

        // Assert
        return Verify(driver)
            .UseDirectory("Snapshots")
            .UseFileName("ExcludedProperties")
            .ScrubLines(line => line.StartsWith("// <auto-generated"));
    }

    [Fact]
    public Task FacetGenerator_WithRecordKind_GeneratesRecord()
    {
        // Arrange
        var source = @"
            using Facet;
            
            public class Product
            {
                public int Id { get; set; }
                public string Name { get; set; }
                public string Description { get; set; }
                public decimal Price { get; set; }
                public bool IsAvailable { get; set; }
            }

            [Facet(typeof(Product), Kind = FacetKind.Record)]
            public partial record ProductDto;
        ";

        var compilation = CreateCompilation(source);
        var generator = new FacetGenerator();

        // Act
        var driver = CSharpGeneratorDriver.Create(generator)
            .RunGenerators(compilation);

        // Assert
        return Verify(driver)
            .UseDirectory("Snapshots")
            .UseFileName("RecordKind")
            .ScrubLines(line => line.StartsWith("// <auto-generated"));
    }

    [Fact]
    public Task FacetGenerator_WithStructKind_GeneratesStruct()
    {
        // Arrange
        var source = @"
            using Facet;
            
            public class Product
            {
                public int Id { get; set; }
                public string Name { get; set; }
                public decimal Price { get; set; }
                public bool IsAvailable { get; set; }
            }

            [Facet(typeof(Product), Kind = FacetKind.Struct)]
            public partial struct ProductSummary;
        ";

        var compilation = CreateCompilation(source);
        var generator = new FacetGenerator();

        // Act
        var driver = CSharpGeneratorDriver.Create(generator)
            .RunGenerators(compilation);

        // Assert
        return Verify(driver)
            .UseDirectory("Snapshots")
            .UseFileName("StructKind")
            .ScrubLines(line => line.StartsWith("// <auto-generated"));
    }

    [Fact]
    public Task FacetGenerator_WithRecordStructKind_GeneratesRecordStruct()
    {
        // Arrange
        var source = @"
            using Facet;
            
            public class User
            {
                public int Id { get; set; }
                public string FirstName { get; set; }
                public string LastName { get; set; }
                public string Email { get; set; }
                public bool IsActive { get; set; }
            }

            [Facet(typeof(User), Kind = FacetKind.RecordStruct)]
            public partial record struct UserSummary;
        ";

        var compilation = CreateCompilation(source);
        var generator = new FacetGenerator();

        // Act
        var driver = CSharpGeneratorDriver.Create(generator)
            .RunGenerators(compilation);

        // Assert
        return Verify(driver)
            .UseDirectory("Snapshots")
            .UseFileName("RecordStructKind")
            .ScrubLines(line => line.StartsWith("// <auto-generated"));
    }

    [Fact]
    public Task FacetGenerator_WithCustomProperties_GeneratesWithAdditionalMembers()
    {
        // Arrange
        var source = @"
            using Facet;
            
            public class User
            {
                public int Id { get; set; }
                public string FirstName { get; set; }
                public string LastName { get; set; }
                public string Email { get; set; }
                public DateTime DateOfBirth { get; set; }
            }

            [Facet(typeof(User))]
            public partial class UserDto
            {
                public string FullName { get; set; } = string.Empty;
                public int Age { get; set; }
            }
        ";

        var compilation = CreateCompilation(source);
        var generator = new FacetGenerator();

        // Act
        var driver = CSharpGeneratorDriver.Create(generator)
            .RunGenerators(compilation);

        // Assert
        return Verify(driver)
            .UseDirectory("Snapshots")
            .UseFileName("CustomProperties")
            .ScrubLines(line => line.StartsWith("// <auto-generated"));
    }

    [Theory]
    [InlineData("Class", "FacetKind.Class")]
    [InlineData("Record", "FacetKind.Record")]
    [InlineData("Struct", "FacetKind.Struct")]
    [InlineData("RecordStruct", "FacetKind.RecordStruct")]
    public Task FacetGenerator_WithDifferentKinds_GeneratesCorrectType(string testName, string facetKind)
    {
        // Arrange
        var source = $@"
            using Facet;
            
            public class TestEntity
            {{
                public int Id {{ get; set; }}
                public string Name {{ get; set; }}
                public decimal Value {{ get; set; }}
            }}

            [Facet(typeof(TestEntity), Kind = {facetKind})]
            public partial {GetTypeDeclaration(testName)} TestDto;
        ";

        var compilation = CreateCompilation(source);
        var generator = new FacetGenerator();

        // Act
        var driver = CSharpGeneratorDriver.Create(generator)
            .RunGenerators(compilation);

        // Assert
        return Verify(driver)
            .UseDirectory("Snapshots")
            .UseMethodName($"Generator_{testName}")
            .ScrubLines(line => line.StartsWith("// <auto-generated"));
    }

    [Fact]
    public Task FacetGenerator_WithInvalidEntity_HandlesGracefully()
    {
        // Arrange - Entity without properties should generate diagnostics
        var source = @"
            using Facet;
            
            public class EmptyEntity
            {
                // No properties - this should be handled gracefully
            }

            [Facet(typeof(EmptyEntity))]
            public partial class EmptyDto;
        ";

        var compilation = CreateCompilation(source);
        var generator = new FacetGenerator();

        // Act
        var driver = CSharpGeneratorDriver.Create(generator)
            .RunGenerators(compilation);

        // Assert - Verify.SourceGenerators will capture diagnostics
        return Verify(driver)
            .UseDirectory("Snapshots")
            .UseFileName("InvalidEntity")
            .ScrubLines(line => line.StartsWith("// <auto-generated"));
    }

    private static string GetTypeDeclaration(string testName)
    {
        return testName switch
        {
            "Class" => "class",
            "Record" => "record",
            "Struct" => "struct", 
            "RecordStruct" => "record struct",
            _ => "class"
        };
    }

    private static Compilation CreateCompilation(string source)
    {
        return CSharpCompilation.Create(
            "TestAssembly",
            syntaxTrees: new[] { CSharpSyntaxTree.ParseText(source) },
            references: GetMetadataReferences(),
            options: new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary));
    }

    private static MetadataReference[] GetMetadataReferences()
    {
        // Get all necessary references for compilation
        return AppDomain.CurrentDomain.GetAssemblies()
            .Where(a => !a.IsDynamic && !string.IsNullOrWhiteSpace(a.Location))
            .Select(a => MetadataReference.CreateFromFile(a.Location))
            .ToArray();
    }
}