// <auto-generated>
//     This code was generated by the Facet source generator.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using System;
using System.Linq.Expressions;

namespace Facet.UnitTests.TestFixtures;
public partial class UserDto
{
    public int Id { get; set; }
    public string FirstName { get; set; }
    public string LastName { get; set; }
    public string Email { get; set; }
    public global::System.DateTime DateOfBirth { get; set; }
    public bool IsActive { get; set; }
    public global::System.DateTime? LastLoginAt { get; set; }
    public string ProfilePictureUrl { get; set; }
    public string Bio { get; set; }

    /// <summary>
    /// Initializes a new instance of the <see cref="UserDto"/> class from the specified <see cref="User"/>.
    /// </summary>
    /// <param name="source">The source <see cref="User"/> object to copy data from.</param>
    public UserDto(global::Facet.UnitTests.TestFixtures.User source)
    {
        this.Id = source.Id;
        this.FirstName = source.FirstName;
        this.LastName = source.LastName;
        this.Email = source.Email;
        this.DateOfBirth = source.DateOfBirth;
        this.IsActive = source.IsActive;
        this.LastLoginAt = source.LastLoginAt;
        this.ProfilePictureUrl = source.ProfilePictureUrl;
        this.Bio = source.Bio;
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="UserDto"/> class with default values.
    /// </summary>
    /// <remarks>
    /// This constructor is useful for unit testing, object initialization, and scenarios
    /// where you need to create an empty instance and populate properties later.
    /// </remarks>
    public UserDto()
    {
    }

    /// <summary>
    /// Gets the projection expression for converting <see cref="User"/> to <see cref="UserDto"/>.
    /// Use this for LINQ and Entity Framework query projections.
    /// </summary>
    /// <value>An expression tree that can be used in LINQ queries for efficient database projections.</value>
    /// <example>
    /// <code>
    /// var dtos = context.Users
    ///     .Where(x => x.IsActive)
    ///     .Select(UserDto.Projection)
    ///     .ToList();
    /// </code>
    /// </example>
    public static Expression<Func<global::Facet.UnitTests.TestFixtures.User, UserDto>> Projection =>
        source => new UserDto(source);
}
