using Facet;

namespace Facet.Tests.TestModels;

/// <summary>
/// Test entities for GenerateDtos integration testing.
/// These will have DTOs generated by the source generator.
/// </summary>

[GenerateDtos(Types = DtoTypes.All, OutputType = OutputType.Class)]
public class TestUser
{
    public int Id { get; set; }
    public string FirstName { get; set; } = string.Empty;
    public string LastName { get; set; } = string.Empty;
    public string Email { get; set; } = string.Empty;
    public string Password { get; set; } = string.Empty;
    public DateTime DateOfBirth { get; set; }
    public bool IsActive { get; set; }
    public DateTime? LastLoginAt { get; set; }
    public DateTime CreatedAt { get; set; }
}

[GenerateAuditableDtos(Types = DtoTypes.Create | DtoTypes.Update | DtoTypes.Response, OutputType = OutputType.Class)]
public class TestProduct
{
    public int Id { get; set; }
    public string Name { get; set; } = string.Empty;
    public string Description { get; set; } = string.Empty;
    public decimal Price { get; set; }
    public bool IsAvailable { get; set; }
    public string InternalNotes { get; set; } = string.Empty;
    public DateTime CreatedAt { get; set; }
    public DateTime UpdatedAt { get; set; }
    public string CreatedBy { get; set; } = string.Empty;
    public string UpdatedBy { get; set; } = string.Empty;
}

// Additional test entities with different configurations

[GenerateDtos(Types = DtoTypes.Response | DtoTypes.Query, OutputType = OutputType.Record)]
public class TestOrder
{
    public Guid Id { get; set; }
    public string OrderNumber { get; set; } = string.Empty;
    public decimal TotalAmount { get; set; }
    public DateTime OrderDate { get; set; }
    public string CustomerEmail { get; set; } = string.Empty;
    public OrderStatus Status { get; set; }
    public string? Notes { get; set; }
}

public enum OrderStatus
{
    Pending,
    Processing,
    Shipped,
    Delivered,
    Cancelled
}

[GenerateDtos(Types = DtoTypes.Create, OutputType = OutputType.Class, ExcludeProperties = new[] { "SecretKey" })]
[GenerateDtos(Types = DtoTypes.Response, OutputType = OutputType.Class, ExcludeProperties = new[] { "SecretKey", "InternalData" })]
public class TestMultiConfigEntity
{
    public int Id { get; set; }
    public string Name { get; set; } = string.Empty;
    public string Description { get; set; } = string.Empty;
    public string SecretKey { get; set; } = string.Empty;
    public string InternalData { get; set; } = string.Empty;
    public bool IsPublic { get; set; }
}

[GenerateDtos(Types = DtoTypes.All, OutputType = OutputType.Record, Prefix = "Api", Suffix = "Model")]
public class TestCustomNaming
{
    public int Id { get; set; }
    public string Title { get; set; } = string.Empty;
    public string Content { get; set; } = string.Empty;
    public DateTime PublishedAt { get; set; }
}

[GenerateAuditableDtos(Types = DtoTypes.All, OutputType = OutputType.RecordStruct)]
public class TestCompactEntity
{
    public int Id { get; set; }
    public string Code { get; set; } = string.Empty;
    public string Value { get; set; } = string.Empty;
    public bool IsEnabled { get; set; }
    public DateTime CreatedAt { get; set; }
    public string CreatedBy { get; set; } = string.Empty;
}

[GenerateDtos(Types = DtoTypes.Response, OutputType = OutputType.Class, IncludeFields = true)]
public class TestEntityWithFields
{
    public int Id;
    public string PublicField = string.Empty;
    public readonly string ReadOnlyField = "readonly"; // Fixed name and made readonly
    public string PropertyField { get; set; } = string.Empty;
    private string PrivateField = "private"; // Should not be included
}

[GenerateDtos(Types = DtoTypes.Create | DtoTypes.Update, OutputType = OutputType.Class)]
public class TestComplexTypes
{
    public int Id { get; set; }
    public string Name { get; set; } = string.Empty;
    public List<string> Tags { get; set; } = new();
    public Dictionary<string, string> Metadata { get; set; } = new();
    public TestNestedType? NestedObject { get; set; }
    public TestNestedType[] ArrayProperty { get; set; } = Array.Empty<TestNestedType>();
}

public class TestNestedType
{
    public string Property1 { get; set; } = string.Empty;
    public int Property2 { get; set; }
}