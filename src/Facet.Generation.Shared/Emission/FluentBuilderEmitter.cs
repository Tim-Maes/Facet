using System;
using System.Collections.Immutable;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;

namespace Facet.Extensions.EFCore.Generators.Emission;

/// <summary>
/// Emits fluent builder classes that provide the With{Navigation}() API.
/// </summary>
public static class FluentBuilderEmitter
{
    public static void Emit(SourceProductionContext context, ModelRoot efModel, ImmutableArray<FacetDtoInfo> facetDtos, ImmutableDictionary<string, ImmutableHashSet<string>> usedChains)
    {
        var generatedBuilders = new System.Collections.Generic.HashSet<string>();

        foreach (var contextModel in efModel.Contexts)
        {
            foreach (var entity in contextModel.Entities)
            {
                var entityClr = entity.Clr?.Replace("global::", "");
                var matchingDto = facetDtos.FirstOrDefault(dto =>
                {
                    var dtoEntityName = dto.EntityTypeName?.Replace("global::", "");
                    return string.Equals(dtoEntityName, entityClr, StringComparison.OrdinalIgnoreCase) ||
                           string.Equals(dtoEntityName, entity.Clr, StringComparison.OrdinalIgnoreCase);
                });

                if (matchingDto == null) continue;

                var entityName = GetSimpleTypeName(entity.Clr ?? entity.Name);
                var builderName = $"Facet{entityName}Builder";
                if (generatedBuilders.Add(builderName))
                {
                    GenerateFluentBuilder(context, entity, matchingDto, usedChains);
                }
            }
        }

        GenerateDbContextExtensionsFile(context, efModel, facetDtos);
    }

    private static void GenerateFluentBuilder(SourceProductionContext context, EntityModel entity, FacetDtoInfo dtoInfo, ImmutableDictionary<string, ImmutableHashSet<string>> usedChains)
    {
        var entityName = GetSimpleTypeName(entity.Clr ?? entity.Name);
        var builderName = $"Facet{entityName}Builder";
        var selectorsClass = $"{entityName}Selectors";

        var sb = new StringBuilder();
        sb.AppendLine("// <auto-generated />");
        sb.AppendLine("#nullable enable");
        sb.AppendLine();
        sb.AppendLine("using System;");
        sb.AppendLine("using System.Collections.Generic;");
        sb.AppendLine("using System.Linq;");
        sb.AppendLine("using System.Linq.Expressions;");
        sb.AppendLine("using System.Threading;");
        sb.AppendLine("using System.Threading.Tasks;");
        sb.AppendLine("using Microsoft.EntityFrameworkCore;");
        sb.AppendLine("using Facet.Extensions;");

        // Add using for the consolidated shape interfaces namespace
        var shapeNamespace = "Facet.Extensions.EFCore.Tests.Extensions"; // TODO: Make this dynamic
        if (shapeNamespace != dtoInfo.DtoNamespace)
        {
            sb.AppendLine($"using {shapeNamespace};");
        }

        sb.AppendLine();
        sb.AppendLine($"namespace {dtoInfo.DtoNamespace};");
        sb.AppendLine();
        sb.AppendLine("/// <summary>");
        sb.AppendLine($"/// Fluent builder for {entityName} queries with Facet shape projection.");
        sb.AppendLine("/// </summary>");
        sb.AppendLine($"public sealed class {builderName}<TShape> where TShape : class");
        sb.AppendLine("{");
        sb.AppendLine($"    private readonly IQueryable<{entity.Clr}> _baseQuery;");
        sb.AppendLine("    private readonly List<string> _includePaths; ");
        sb.AppendLine($"    private readonly Expression<Func<{entity.Clr}, TShape>> _selector;");
        sb.AppendLine();
        sb.AppendLine($"    internal {builderName}(IQueryable<{entity.Clr}> baseQuery, Expression<Func<{entity.Clr}, TShape>> selector)");
        sb.AppendLine("    {");
        sb.AppendLine("        _baseQuery = baseQuery;");
        sb.AppendLine("        _selector = selector;");
        sb.AppendLine("        _includePaths = new List<string>();");
        sb.AppendLine("    }");
        sb.AppendLine();
        sb.AppendLine($"    private {builderName}(IQueryable<{entity.Clr}> baseQuery, Expression<Func<{entity.Clr}, TShape>> selector, List<string> includePaths)");
        sb.AppendLine("    {");
        sb.AppendLine("        _baseQuery = baseQuery;");
        sb.AppendLine("        _selector = selector;");
        sb.AppendLine("        _includePaths = includePaths; // already a copy when created");
        sb.AppendLine("    }");
        sb.AppendLine();
        sb.AppendLine("    private IQueryable<" + entity.Clr + "> BuildQuery() => _includePaths.Distinct().Aggregate(_baseQuery, (q, path) => q.Include(path));");
        sb.AppendLine();

        // Where
        sb.AppendLine("    /// <summary>Apply predicate without changing current shape.</summary>");
        sb.AppendLine($"    public {builderName}<TShape> Where(Expression<Func<{entity.Clr}, bool>> predicate)");
        sb.AppendLine("    {");
        sb.AppendLine("        if (predicate == null) throw new ArgumentNullException(nameof(predicate));");
        sb.AppendLine($"        return new {builderName}<TShape>(_baseQuery.Where(predicate), _selector, new List<string>(_includePaths));");
        sb.AppendLine("    }");
        sb.AppendLine();

        // With navigation methods
        foreach (var nav in entity.Navigations)
        {
            var navName = nav.Name;
            var targetEntityName = GetSimpleTypeName(nav.Target);
            var targetSelectorsClass = $"{targetEntityName}Selectors";
            // Basic include
            sb.AppendLine("    /// <summary>Include navigation '" + navName + "' returning shape with capability interface.</summary>");
            sb.AppendLine($"    public {builderName}<I{entityName}With{navName}<I{targetEntityName}Shape>> With{navName}()");
            sb.AppendLine("    {");
            sb.AppendLine("        var includes = new List<string>(_includePaths) { \"" + navName + "\" }; ");
            sb.AppendLine($"        var selector = {selectorsClass}.With{navName}Shape as Expression<Func<{entity.Clr}, I{entityName}With{navName}<I{targetEntityName}Shape>>> ?? throw new InvalidOperationException(\"Selector for {entityName}.{navName} not generated\");");
            sb.AppendLine($"        return new {builderName}<I{entityName}With{navName}<I{targetEntityName}Shape>>(_baseQuery, selector, includes);");
            sb.AppendLine("    }");
            sb.AppendLine();
        }

        // Execution methods projected to current shape
        sb.AppendLine("    /// <summary>Materialize list of current shape.</summary>");
        sb.AppendLine("    public async Task<List<TShape>> ToListAsync(CancellationToken cancellationToken = default)");
        sb.AppendLine("    { return await BuildQuery().Select(_selector).ToListAsync(cancellationToken); }");
        sb.AppendLine();
        sb.AppendLine("    /// <summary>First or default of current shape.</summary>");
        sb.AppendLine("    public async Task<TShape?> FirstOrDefaultAsync(CancellationToken cancellationToken = default)");
        sb.AppendLine("    { return await BuildQuery().Select(_selector).FirstOrDefaultAsync(cancellationToken); }");
        sb.AppendLine();
        sb.AppendLine("    /// <summary>Get by Id assuming 'Id' property.</summary>");
        sb.AppendLine("    public async Task<TShape?> GetByIdAsync(object id, CancellationToken cancellationToken = default)");
        sb.AppendLine("    { var q = BuildQuery().Where(e => EF.Property<object>(e, \"Id\").Equals(id)); return await q.Select(_selector).FirstOrDefaultAsync(cancellationToken); }");
    sb.AppendLine();
    sb.AppendLine("    /// <summary>Project underlying entity set (with includes) to Facet DTO using SelectFacet.</summary>");
    sb.AppendLine("    public IQueryable<TDto> ProjectTo<TDto>() where TDto : class");
    sb.AppendLine("    { return BuildQuery().SelectFacet<TDto>(); }");
    sb.AppendLine();
    sb.AppendLine("    /// <summary>Materialize DTO list.</summary>");
    sb.AppendLine("    public Task<List<TDto>> ToListDtoAsync<TDto>(CancellationToken cancellationToken = default) where TDto: class => BuildQuery().SelectFacet<TDto>().ToListAsync(cancellationToken);");
    sb.AppendLine();
    sb.AppendLine("    /// <summary>First or default DTO.</summary>");
    sb.AppendLine("    public Task<TDto?> FirstOrDefaultDtoAsync<TDto>(CancellationToken cancellationToken = default) where TDto: class => BuildQuery().SelectFacet<TDto>().FirstOrDefaultAsync(cancellationToken);");

    sb.AppendLine("}");

        var source = SourceText.From(sb.ToString(), Encoding.UTF8);
        context.AddSource($"{builderName}.g.cs", source);
    }

    private static void GenerateDbContextExtensionsFile(SourceProductionContext context, ModelRoot efModel, ImmutableArray<FacetDtoInfo> facetDtos)
    {
        var sb = new StringBuilder();
        sb.AppendLine("// <auto-generated />");
        sb.AppendLine("#nullable enable");
        sb.AppendLine();
        sb.AppendLine("using Microsoft.EntityFrameworkCore;");
        sb.AppendLine("using System;");
        sb.AppendLine("using System.Linq;");
        foreach (var ns in facetDtos.Select(d => d.DtoNamespace).Distinct())
        {
            if (!string.IsNullOrWhiteSpace(ns)) sb.AppendLine($"using {ns};");
        }
        sb.AppendLine();
        var firstEntity = efModel.Contexts.FirstOrDefault()?.Entities.FirstOrDefault();
    // Force namespace to Persistence so extensions appear on the DbContext
    var contextNamespace = efModel.Contexts.FirstOrDefault()?.Context.Split('.').Take(2).FirstOrDefault() ?? "Application";
    sb.AppendLine($"namespace {contextNamespace}.Persistence;");
        sb.AppendLine();
        sb.AppendLine("public static class FacetDbContextExtensions");
        sb.AppendLine("{");
        foreach (var ctx in efModel.Contexts)
        {
            foreach (var entity in ctx.Entities)
            {
                var entityClr = entity.Clr?.Replace("global::", "");
                var matchingDto = facetDtos.FirstOrDefault(dto => dto.EntityTypeName?.Replace("global::", "") == entityClr || dto.EntityTypeName == entity.Clr);
                if (matchingDto == null) continue;
                var entityName = GetSimpleTypeName(entity.Clr ?? entity.Name);
                var builderName = $"Facet{entityName}Builder";
                var selectorsClass = $"{entityName}Selectors";
                sb.AppendLine($"    public static {builderName}<I{entityName}Shape> Facet{entityName}(this DbContext context)");
                sb.AppendLine("    {");
                sb.AppendLine($"        var set = context.Set<{entity.Clr}>().AsNoTracking();");
                sb.AppendLine($"        return new {builderName}<I{entityName}Shape>(set, {selectorsClass}.BaseShape);");
                sb.AppendLine("    }");
                sb.AppendLine();
            }
        }
    // NOTE: Projection from shape to DTO is performed via consumer calling .Select(GetXResponse.Projection)
        sb.AppendLine("}");
        var source = SourceText.From(sb.ToString(), Encoding.UTF8);
        context.AddSource("FacetDbContextExtensions.g.cs", source);
    }

    private static string GetSimpleTypeName(string fullTypeName)
    {
        var lastDot = fullTypeName.LastIndexOf('.');
        return lastDot >= 0 ? fullTypeName.Substring(lastDot + 1) : fullTypeName;
    }
}
