using System;
using System.Threading;
using System.Threading.Tasks;

namespace Facet.Mapping.Examples;

// Example source models
public class User
{
    public int Id { get; set; }
    public string FirstName { get; set; } = "";
    public string LastName { get; set; } = "";
    public string Email { get; set; } = "";
}

// Example Facet DTO (would be generated by Facet source generator)
public partial class UserDto
{
    public int Id { get; set; }
    public string FirstName { get; set; } = "";
    public string LastName { get; set; } = "";
    public string Email { get; set; } = "";
    public string FullName { get; set; } = "";
    public string ProfilePictureUrl { get; set; } = "";
    public decimal ReputationScore { get; set; }
    
    // This constructor would normally be generated by Facet
    public UserDto() { }
    
    public UserDto(User source)
    {
        Id = source.Id;
        FirstName = source.FirstName;
        LastName = source.LastName;
        Email = source.Email;
    }
}

// Example async mapper
public class UserAsyncMapper : IFacetMapConfigurationAsync<User, UserDto>
{
    public static async Task MapAsync(User source, UserDto target, CancellationToken cancellationToken = default)
    {
        // Simulate async database call for profile picture
        target.ProfilePictureUrl = await GetProfilePictureAsync(source.Id, cancellationToken);
        
        // Simulate async API call for reputation
        target.ReputationScore = await CalculateReputationAsync(source.Email, cancellationToken);
        
        // Set computed property
        target.FullName = $"{source.FirstName} {source.LastName}";
    }
    
    private static async Task<string> GetProfilePictureAsync(int userId, CancellationToken cancellationToken)
    {
        // Simulate database lookup
        await Task.Delay(100, cancellationToken);
        return $"https://api.example.com/users/{userId}/avatar.jpg";
    }
    
    private static async Task<decimal> CalculateReputationAsync(string email, CancellationToken cancellationToken)
    {
        // Simulate API call to reputation service
        await Task.Delay(50, cancellationToken);
        return Random.Shared.Next(1, 6) + (decimal)Random.Shared.NextDouble();
    }
}

// Example hybrid mapper
public class UserHybridMapper : IFacetMapConfigurationHybrid<User, UserDto>
{
    // Fast synchronous operations
    public static void Map(User source, UserDto target)
    {
        target.FullName = $"{source.FirstName} {source.LastName}";
    }

    // Expensive asynchronous operations
    public static async Task MapAsync(User source, UserDto target, CancellationToken cancellationToken = default)
    {
        target.ProfilePictureUrl = await GetProfilePictureAsync(source.Id, cancellationToken);
        target.ReputationScore = await CalculateReputationAsync(source.Email, cancellationToken);
    }
    
    private static async Task<string> GetProfilePictureAsync(int userId, CancellationToken cancellationToken)
    {
        await Task.Delay(100, cancellationToken);
        return $"https://api.example.com/users/{userId}/avatar.jpg";
    }
    
    private static async Task<decimal> CalculateReputationAsync(string email, CancellationToken cancellationToken)
    {
        await Task.Delay(50, cancellationToken);
        return Random.Shared.Next(1, 6) + (decimal)Random.Shared.NextDouble();
    }
}

// Example usage class
public static class AsyncMappingExamples
{
    public static async Task RunExamplesAsync()
    {
        var user = new User 
        { 
            Id = 1, 
            FirstName = "John", 
            LastName = "Doe", 
            Email = "john.doe@example.com" 
        };

        // Example 1: Pure async mapping
        var userDto1 = await user.ToFacetAsync<User, UserDto, UserAsyncMapper>();
        Console.WriteLine($"Async mapped: {userDto1.FullName}, Profile: {userDto1.ProfilePictureUrl}");

        // Example 2: Constructor + async mapping
        var userDto2 = await user.ToFacetWithConstructorAsync<User, UserDto, UserAsyncMapper>();
        Console.WriteLine($"Constructor + Async: {userDto2.FullName}, Reputation: {userDto2.ReputationScore}");

        // Example 3: Hybrid mapping
        var userDto3 = await user.ToFacetHybridAsync<User, UserDto, UserHybridMapper>();
        Console.WriteLine($"Hybrid mapped: {userDto3.FullName}, Profile: {userDto3.ProfilePictureUrl}");

        // Example 4: Collection mapping
        var users = new[] { user, new User { Id = 2, FirstName = "Jane", LastName = "Smith", Email = "jane@example.com" } };
        var userDtos = await users.ToFacetsAsync<User, UserDto, UserAsyncMapper>();
        Console.WriteLine($"Mapped {userDtos.Count} users");

        // Example 5: Parallel collection mapping
        var userDtosParallel = await users.ToFacetsParallelAsync<User, UserDto, UserAsyncMapper>(maxDegreeOfParallelism: 2);
        Console.WriteLine($"Parallel mapped {userDtosParallel.Count} users");
    }
}