using System.Collections.Immutable;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using Facet.Extensions.EFCore.Generators.Shared;

namespace Facet.Extensions.EFCore.Generators.Emission;

/// <summary>
/// Emits shape interfaces for Facet projections.
/// </summary>
public static class ShapeInterfacesEmitter
{
    public static void Emit(SourceProductionContext context, ModelRoot efModel, ImmutableArray<FacetDtoInfo> facetDtos)
    {
        foreach (var contextModel in efModel.Contexts)
        {
            foreach (var entity in contextModel.Entities)
            {
                // Find matching DTO (handle global:: prefix)
                var entityClr = entity.Clr?.Replace("global::", "");
                var matchingDto = facetDtos.FirstOrDefault(dto =>
                {
                    var dtoEntityName = dto.EntityTypeName?.Replace("global::", "");
                    return string.Equals(dtoEntityName, entityClr, System.StringComparison.OrdinalIgnoreCase) ||
                           string.Equals(dtoEntityName, entity.Clr, System.StringComparison.OrdinalIgnoreCase);
                });

                if (matchingDto == null) continue;

                GenerateShapeInterfaces(context, entity, matchingDto);
            }
        }
    }

    private static void GenerateShapeInterfaces(SourceProductionContext context, EntityModel entity, FacetDtoInfo dtoInfo)
    {
        var entityName = GetSimpleTypeName(entity.Clr ?? entity.Name);
        var sb = new StringBuilder();

        // Generate file header
        sb.AppendLine("// <auto-generated />");
        sb.AppendLine("#nullable enable");
        sb.AppendLine();
        sb.AppendLine("using System.Collections.Generic;");
        sb.AppendLine();
        sb.AppendLine($"namespace {dtoInfo.DtoNamespace};");
        sb.AppendLine();

        // Generate base shape interface
        sb.AppendLine($"/// <summary>");
        sb.AppendLine($"/// Base shape interface for {entityName} projections.");
        sb.AppendLine($"/// </summary>");
        sb.AppendLine($"public interface I{entityName}Shape");
        sb.AppendLine("{");

        // Generate properties based on DTO analysis
        var scalarProperties = dtoInfo.Properties.Where(p => !p.IsNavigation).ToList();
        foreach (var prop in scalarProperties)
        {
            sb.AppendLine($"    /// <summary>");
            sb.AppendLine($"    /// {prop.Name} property.");
            sb.AppendLine($"    /// </summary>");
            sb.AppendLine($"    {prop.TypeName} {prop.Name} {{ get; }}");
            sb.AppendLine();
        }

        sb.AppendLine("}");
        sb.AppendLine();

        var sourceText = SourceText.From(sb.ToString(), System.Text.Encoding.UTF8);
        context.AddSource($"I{entityName}Shape.g.cs", sourceText);
    }

    private static string GetSimpleTypeName(string fullTypeName)
    {
        var lastDot = fullTypeName.LastIndexOf('.');
        return lastDot >= 0 ? fullTypeName.Substring(lastDot + 1) : fullTypeName;
    }
}