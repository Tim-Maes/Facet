using System.Collections.Immutable;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using System.Collections.Generic;

namespace Facet.Extensions.EFCore.Generators.Emission;

/// <summary>
/// Emits shape interfaces that define the base scalar properties of entities.
/// </summary>
internal static class ShapeInterfacesEmitter
{
    public static void Emit(SourceProductionContext context, ModelRoot efModel, ImmutableArray<FacetDtoInfo> facetDtos)
    {
        foreach (var contextModel in efModel.Contexts)
        {
            foreach (var entity in contextModel.Entities)
            {
                // Find matching DTO
                var matchingDto = facetDtos.FirstOrDefault(dto => 
                    string.Equals(dto.EntityTypeName, entity.Clr, System.StringComparison.OrdinalIgnoreCase));

                if (matchingDto == null)
                {
                    context.ReportDiagnostic(Diagnostic.Create(
                        Diagnostics.DtoNotFound,
                        Location.None,
                        "No DTO found",
                        entity.Clr ?? entity.Name));
                    continue;
                }

                GenerateShapeInterface(context, entity, matchingDto);
            }
        }
    }

    private static void GenerateShapeInterface(SourceProductionContext context, EntityModel entity, FacetDtoInfo dtoInfo)
    {
        var entityName = GetSimpleTypeName(entity.Clr ?? entity.Name);
        var interfaceName = $"I{entityName}Shape";
        
        var sb = new StringBuilder();
        
        // Generate file header
        sb.AppendLine("// <auto-generated />");
        sb.AppendLine("#nullable enable");
        sb.AppendLine();
        sb.AppendLine($"namespace {dtoInfo.DtoNamespace};");
        sb.AppendLine();
        
        // Apply TypeScript attributes if configured
        foreach (var tsAttribute in dtoInfo.TypeScriptAttributes)
        {
            sb.AppendLine(tsAttribute);
        }
        
        // Generate shape interface
        sb.AppendLine($"/// <summary>");
        sb.AppendLine($"/// Defines the shape of {entityName} with scalar properties only.");
        sb.AppendLine($"/// </summary>");
        sb.AppendLine($"public interface {interfaceName}");
        sb.AppendLine("{");
        
        // Generate properties from DTO analysis
        GenerateShapeProperties(sb, dtoInfo);
        
        sb.AppendLine("}");

        var sourceText = SourceText.From(sb.ToString(), System.Text.Encoding.UTF8);
        context.AddSource($"{interfaceName}.g.cs", sourceText);
    }

    private static void GenerateShapeProperties(StringBuilder sb, FacetDtoInfo dtoInfo)
    {
        var scalarProperties = dtoInfo.Properties.Where(p => !p.IsNavigation).ToList();
        
        if (scalarProperties.Count == 0)
        {
            sb.AppendLine("    // No scalar properties found in DTO analysis");
            return;
        }
        
        foreach (var prop in scalarProperties)
        {
            sb.AppendLine($"    /// <summary>");
            sb.AppendLine($"    /// {prop.Name} property from the entity.");
            sb.AppendLine($"    /// </summary>");
            sb.AppendLine($"    {prop.TypeName} {prop.Name} {{ get; }}");
            sb.AppendLine();
        }
    }
    
    private static string GetSimpleTypeName(string fullTypeName)
    {
        var lastDot = fullTypeName.LastIndexOf('.');
        return lastDot >= 0 ? fullTypeName.Substring(lastDot + 1) : fullTypeName;
    }
}