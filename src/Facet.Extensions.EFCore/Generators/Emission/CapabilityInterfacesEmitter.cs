using System.Collections.Immutable;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using Facet.Extensions.EFCore.Generators.Shared;

namespace Facet.Extensions.EFCore.Generators.Emission;

/// <summary>
/// Emits capability interfaces for navigation inclusion.
/// </summary>
public static class CapabilityInterfacesEmitter
{
    public static void Emit(SourceProductionContext context, ModelRoot efModel, ImmutableArray<FacetDtoInfo> facetDtos)
    {
        foreach (var contextModel in efModel.Contexts)
        {
            foreach (var entity in contextModel.Entities)
            {
                // Find matching DTO (handle global:: prefix)
                var entityClr = entity.Clr?.Replace("global::", "");
                var matchingDto = facetDtos.FirstOrDefault(dto =>
                {
                    var dtoEntityName = dto.EntityTypeName?.Replace("global::", "");
                    return string.Equals(dtoEntityName, entityClr, System.StringComparison.OrdinalIgnoreCase) ||
                           string.Equals(dtoEntityName, entity.Clr, System.StringComparison.OrdinalIgnoreCase);
                });

                if (matchingDto == null) continue;

                GenerateCapabilityInterfaces(context, entity, matchingDto);
            }
        }
    }

    private static void GenerateCapabilityInterfaces(SourceProductionContext context, EntityModel entity, FacetDtoInfo dtoInfo)
    {
        var entityName = GetSimpleTypeName(entity.Clr ?? entity.Name);
        var sb = new StringBuilder();

        // Generate file header
        sb.AppendLine("// <auto-generated />");
        sb.AppendLine("#nullable enable");
        sb.AppendLine();
        sb.AppendLine("using System.Collections.Generic;");
        sb.AppendLine();
        sb.AppendLine($"namespace {dtoInfo.DtoNamespace};");
        sb.AppendLine();

        // Generate navigation capability interfaces
        foreach (var navigation in entity.Navigations)
        {
            var navName = navigation.Name;
            var targetEntityName = GetSimpleTypeName(navigation.Target);

            sb.AppendLine($"/// <summary>");
            sb.AppendLine($"/// Capability interface for {entityName} with {navName} navigation included.");
            sb.AppendLine($"/// </summary>");
            sb.AppendLine($"public interface I{entityName}With{navName}<TNavShape> : I{entityName}Shape");
            sb.AppendLine("{");

            if (navigation.IsCollection)
            {
                sb.AppendLine($"    /// <summary>");
                sb.AppendLine($"    /// {navName} navigation property (collection).");
                sb.AppendLine($"    /// </summary>");
                sb.AppendLine($"    IReadOnlyList<TNavShape> {navName} {{ get; }}");
            }
            else
            {
                sb.AppendLine($"    /// <summary>");
                sb.AppendLine($"    /// {navName} navigation property (single).");
                sb.AppendLine($"    /// </summary>");
                sb.AppendLine($"    TNavShape {navName} {{ get; }}");
            }

            sb.AppendLine("}");
            sb.AppendLine();
        }

        var sourceText = SourceText.From(sb.ToString(), System.Text.Encoding.UTF8);
        context.AddSource($"I{entityName}Capabilities.g.cs", sourceText);
    }

    private static string GetSimpleTypeName(string fullTypeName)
    {
        var lastDot = fullTypeName.LastIndexOf('.');
        return lastDot >= 0 ? fullTypeName.Substring(lastDot + 1) : fullTypeName;
    }
}