name: Release

on:
  release:
    types: [published]

permissions:
  contents: write

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true

jobs:
  release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          8.0.x
          9.0.x
    
    - name: Extract version from release tag
      id: get_version
      run: |
        # Remove 'v' prefix from tag name if present (e.g., v2.5.0 -> 2.5.0)
        VERSION=${GITHUB_REF_NAME#v}
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "Extracted version: $VERSION"
    
    - name: Update version in Directory.Build.props
      run: |
        # Update the version in Directory.Build.props
        sed -i "s|<Version>.*</Version>|<Version>${{ steps.get_version.outputs.VERSION }}</Version>|g" Directory.Build.props
        echo "Updated Directory.Build.props with version ${{ steps.get_version.outputs.VERSION }}"
        cat Directory.Build.props
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build
      run: dotnet build --configuration Release --no-restore
    
    - name: Run Unit Tests
      run: dotnet test --configuration Release --no-build --verbosity normal
    
    - name: Pack NuGet packages
      run: dotnet pack --configuration Release --no-build --output ./artifacts
    
    - name: List generated packages
      run: ls -la ./artifacts/
    
    - name: Publish to NuGet
      shell: pwsh
      run: |
        foreach ($file in Get-ChildItem "./artifacts" -Recurse -Include *.nupkg) {
          Write-Host "Processing package: $($file.Name)"
          
          if ($file.Name -like "Facet.Mapping.*.nupkg") {
            Write-Host "Publishing Facet.Mapping package..."
            dotnet nuget push $file `
              --api-key "${{ secrets.NUGET_MAP_API_KEY }}" `
              --source https://api.nuget.org/v3/index.json `
              --skip-duplicate
          } elseif ($file.Name -like "Facet.Extensions.EFCore.*.nupkg") {
            Write-Host "Publishing Facet.Extensions.EFCore package..."
            dotnet nuget push $file `
              --api-key "${{ secrets.NUGET_API_KEY_EXTENSIONS_EF }}" `
              --source https://api.nuget.org/v3/index.json `
              --skip-duplicate
          } elseif ($file.Name -like "Facet.Extensions.*.nupkg") {
            Write-Host "Publishing Facet.Extensions package..."
            dotnet nuget push $file `
              --api-key "${{ secrets.NUGET_API_KEY_EXTENSIONS }}" `
              --source https://api.nuget.org/v3/index.json `
              --skip-duplicate
              } elseif ($file.Name -like "Facet.Mapping.Expressions.*.nupkg") {
            Write-Host "Publishing Facet.Mapping.Expressions package..."
            dotnet nuget push $file `
              --api-key "${{ secrets.NUGET_API_KEY_EXPRESSIONS }}" `
              --source https://api.nuget.org/v3/index.json `
              --skip-duplicate
          } elseif ($file.Name -like "Facet.*.nupkg") {
            Write-Host "Publishing Facet package..."
            dotnet nuget push $file `
              --api-key "${{ secrets.NUGET_API_KEY }}" `
              --source https://api.nuget.org/v3/index.json `
              --skip-duplicate
          } else {
            Write-Host "Skipping unknown package: $($file.Name)"
          }
        }
    
    - name: Commit version update
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Check if we're on a detached HEAD and create/switch to master branch
        if git symbolic-ref HEAD >/dev/null 2>&1; then
          echo "On branch, proceeding with commit"
        else
          echo "Detached HEAD detected, switching to master branch"
          git checkout -B master
        fi
        
        # Only commit if there are changes
        if git diff --quiet Directory.Build.props; then
          echo "No changes to commit"
        else
          git add Directory.Build.props
          git commit -m "Bump version to ${{ steps.get_version.outputs.VERSION }}"
          git push origin master
        fi